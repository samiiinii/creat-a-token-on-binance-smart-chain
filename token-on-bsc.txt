pragma solidity ^0.8.2;

contract Tokentest{
    
    mapping(address => mapping(address => uint)) public allowance;
    mapping(address => uint) public balances;
    string public name = "SATOKEN";
    string public symbol = "SAT";
    uint public totalSupply = 10000 * 10 ** 18 ;
    uint public dec = 18;
    
    event Transfer(address indexed from , address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    
    constructor(){
        balances[msg.sender] = totalSupply ;
    }
    
    
    function BalanceOf(address owner)public view returns(uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) public returns(bool) {
        require(BalanceOf(msg.sender) >= value, 'Balance is low');
        balances[to] += value;
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, to, value);
        return true;
    }
    
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(BalanceOf(from) >= value,'Balance is low');
        require(allowance[from][msg.sender] >= value, 'Allowance is low');
        balances[from] -= value;
        balances[to] += value;
        emit Transfer(from, to,value);
        return true;
    }
    
    function approve(address spender, uint value )public returns(bool) {
        allowance[msg.sender][spender] = value; 
        emit Approval(msg.sender,spender,value);
        return true;
    }
    
    
}